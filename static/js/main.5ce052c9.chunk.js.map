{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","problem","cProblem","solution","cSolution","results","cResults","className","rows","value","onChange","e","target","placeholder","split","length","Math","floor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wJA0FeA,MAxFf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACRC,EADQ,KACCC,EADD,OAEeF,mBAAS,IAFxB,mBAERG,EAFQ,KAEEC,EAFF,OAGaJ,mBAAS,IAHtB,mBAGRK,EAHQ,KAGCC,EAHD,KAKb,OACE,yBAAKC,UAAU,QACb,wBAAIA,UAAU,uCAAd,qBACA,yBAAKA,UAAU,mEAEb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,YAAd,WACA,wBAAIA,UAAU,WAAd,8CACA,wBAAIA,UAAU,aACZ,+FACA,8DACA,8EACA,8EACA,mEAGJ,yBAAKA,UAAU,wBACb,8BAAUA,UAAU,6HAA6HC,KAAK,IACtJC,MAAOR,EACPS,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOH,QACjCI,YAAY,qFAEV,uBAAGN,UAAU,iBAAb,UAAqCN,EAAQa,MAAM,KAAKC,OAAxD,eACUC,KAAKC,MAAMhB,EAAQa,MAAM,KAAKC,OAAS,IAAM,IADvD,MAC+DC,KAAKC,MAAMhB,EAAQa,MAAM,KAAKC,OAAS,IAAM,IAD5G,kBAIF,yBAAKR,UAAU,QACb,wBAAIA,UAAU,YAAd,YACA,wBAAIA,UAAU,WAAd,4BACA,wBAAIA,UAAU,aACZ,gDACA,iEACA,+GAGJ,yBAAKA,UAAU,wBACb,8BAAUA,UAAU,6HAA6HC,KAAK,IACtJC,MAAON,EACPO,SAAU,SAAAC,GAAC,OAAIP,EAAUO,EAAEC,OAAOH,QAClCI,YAAY,qFAEZ,uBAAGN,UAAU,iBAAb,UAAqCJ,EAASW,MAAM,KAAKC,OAAzD,eACUC,KAAKC,MAAMd,EAASW,MAAM,KAAKC,OAAS,IAAM,IADxD,MACgEC,KAAKC,MAAMd,EAASW,MAAM,KAAKC,OAAS,IAAM,IAD9G,kBAIA,yBAAKR,UAAU,QACb,wBAAIA,UAAU,YAAd,WACA,wBAAIA,UAAU,WAAd,iCACA,wBAAIA,UAAU,aACZ,iEACA,0FACA,mEACA,oHACA,4GACA,6GAGZ,yBAAKA,UAAU,wBACb,8BAAUA,UAAU,6HAA6HC,KAAK,IACtJC,MAAOJ,EACPK,SAAU,SAAAC,GAAC,OAAIL,EAASK,EAAEC,OAAOH,QACjCI,YAAY,4JAEN,uBAAGN,UAAU,iBAAb,UAAqCF,EAAQS,MAAM,KAAKC,OAAxD,eACUC,KAAKC,MAAMZ,EAAQS,MAAM,KAAKC,OAAS,IAAM,IADvD,MAC+DC,KAAKC,MAAMZ,EAAQS,MAAM,KAAKC,OAAS,IAAM,IAD5G,mBAON,yBAAKR,UAAU,4EACb,uBAAGA,UAAU,QAAQN,GACrB,uBAAGM,UAAU,QAAQJ,GACrB,uBAAGI,UAAU,QAAQF,IAEzB,0BAAME,UAAU,6BCtEAW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5ce052c9.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction App() {\n  let [problem, cProblem] = useState('')\n  let [solution, cSolution] = useState('')\n  let [results, cResults] = useState('')\n\n  return (\n    <div className=\"mx-4\">\n      <h1 className=\"mt-4 font-bold text-4xl text-center\">Narrative Builder</h1>\n      <div className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4 grid grid-cols-3\">\n\n        <div className=\"mb-4\">\n          <h3 className=\"text-3xl\">Problem</h3>\n          <h4 className=\"text-xl\">Find the real pain, dramatic and emotional</h4>\n          <ul className=\"list-disc\">\n            <li>What would have happened if you hadn’t solved the problem?</li>\n            <li>How much would that have cost?</li>\n            <li>What was the business impact of doing nothing?</li>\n            <li>What would that mean for your job? For others?</li>\n            <li>Why was what you did worth doing?</li>\n          </ul>\n        </div>\n        <div className=\"col-span-2 mb-4 ml-2\">\n          <textarea className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" rows=\"7\"\n          value={problem}\n          onChange={e => cProblem(e.target.value)}\n          placeholder=\"2-3 sentences about the problem you were faced with and why it had to be solved.\"\n        />\n            <p className=\"text-gray-500\">Words: {problem.split(' ').length} | \n            Seconds: {Math.floor(problem.split(' ').length / 150 * 60)} - {Math.floor(problem.split(' ').length / 100 * 60)} (Target: 20)</p>\n          </div>\n\n          <div className=\"mb-4\">\n            <h3 className=\"text-3xl\">Solution</h3>\n            <h4 className=\"text-xl\">Adding Emotion and Drama</h4>\n            <ul className=\"list-disc\">\n              <li>What did you do?</li>\n              <li>That no one else could have done?</li>\n              <li>What did you try that didn’t work, on your way to a successful solution?</li>\n            </ul>\n          </div>\n          <div className=\"col-span-2 mb-4 ml-2\">\n            <textarea className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" rows=\"7\"\n            value={solution}\n            onChange={e => cSolution(e.target.value)}\n            placeholder=\"In the solution you want to talk about what you, ideally that only you could do.\"\n          />\n            <p className=\"text-gray-500\">Words: {solution.split(' ').length} | \n            Seconds: {Math.floor(solution.split(' ').length / 150 * 60)} - {Math.floor(solution.split(' ').length / 100 * 60)} (Target: 50)</p>\n            </div>\n\n            <div className=\"mb-4\">\n              <h3 className=\"text-3xl\">Results</h3>\n              <h4 className=\"text-xl\">Dramatic and Transformational</h4>\n              <ul className=\"list-disc\">\n                <li>Did you get recognition for this?</li>\n                <li>Did it make your boss look better? Help him/her save face?</li>\n                <li>Did you get a raise or a promotion?</li>\n                <li>Did it change your reputation in the company? Did you become “the expert?”</li>\n                <li>Most quantitative results and business results are NOT dramatic on their own</li>\n                <li>Exceptions: Making something 10x better or completely eliminating a problem</li>\n              </ul>\n    </div>\n    <div className=\"col-span-2 mb-4 ml-2\">\n      <textarea className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" rows=\"7\"\n      value={results}\n      onChange={e => cResults(e.target.value)}\n      placeholder=\"“Pay off” all the challenges in the problem. Don’t mention it in the problem if you didn’t have an impact on it with your solution.\"\n    />\n            <p className=\"text-gray-500\">Words: {results.split(' ').length} | \n            Seconds: {Math.floor(results.split(' ').length / 150 * 60)} - {Math.floor(results.split(' ').length / 100 * 60)} (Target: 20)</p>\n      </div>\n\n\n    </div>\n\n      <div className=\"container mx-auto bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4 text-xl\">\n        <p className=\"mb-2\">{problem}</p>\n        <p className=\"mb-2\">{solution}</p>\n        <p className=\"mb-2\">{results}</p>\n      </div>\n    <span className=\"text-gray-500 text-xs \">\n      {/* made with &lt;3 by <a href=\"https://tamaserdos.com\">Tamas Erdos</a> */}\n    </span>\n    </div>\n  );\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}